openapi: 3.0.3
info:
  title: Library API
  version: 1.3.0
  description: STD22001
servers:
  - url: https://library.com
tags:
  - name: Books
  - name: Authors 
  - name: Administrator
security:
  - BearerAuth: [ ]
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: page
          schema:
            $ref: '#/components/parameters/QueryPagination/schema/properties/page'
        - in: query
          name: pagesize
          schema:
            $ref: '#/components/parameters/QueryPagination/schema/properties/page_size'
    
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateMin
          description: If 'releaseDateMax' is note provide,'releaseDateMin' is ignored 'releaseDateMax' can not be after 'releaseDateMin'
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: releaseDateMax
          description: If 'releaseDateMin' is note provide,'releaseDateMax' is ignored 'releaseDateMin' can not be after 'releaseDateMax'
          schema:
            type: string
            format: date
          required: false
      responses:
        '200':
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'

  /books/{bookId}/authors/{authorId} :
    put:
      tags:
        - Books
      summary: create or update book
      description: This operation create or update author of the book by specification id.
      operationId: crupdateBookAuthor
      parameters:
        - in: query
          name: bookId
          description: Create books by given bookId
          required: false
          schema:
            type: string
        - in: query
          name: authorId
          description: Create  books by given authorId
          schema:
            type: string
          required: false
      responses:
        '200':
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CrupdateBooks'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /books/authors  :
    put:
      tags:
        - Authors
      summary: UpdateBookAuthor 
      description: update book author. 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateBooks'
      responses:
        '200':
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UpdateBooks'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /books/import:
    post:
      tags:
          - Books
      summary: Create  a list of books
      operationId: createBooks
      requestBody:
        content:
          application/json:
            schema:              
                $ref: '#/components/schemas/ImportBookJson'
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
               $ref: '#/components/schemas/ImportBookExel'
      responses:
        '200':
          description: The list of created authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CrupdateBooks'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /authors/import:
    post:
      tags:
          - Authors
      summary: Create  a list of author
      operationId: createAuthors
      requestBody:
        content:
          application/json:
            schema:
               $ref: '#/components/schemas/ImportAuthorJson'
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              $ref: '#/components/schemas/ImportAuthorExel'
      responses:
        '200':
          description: The list of created authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'

  /authors:
     get:
      summary: Get author by name
      description:  Retrieve a list of authors, optionally filtered by name.
      operationId: getByAuthorName
      tags:
        - Authors
      parameters:
        - in: query
          name: name
          description: Name to filter authors
          required: false
          schema:
            type: string
      responses:
        '200':
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
     put:
      tags:
          - Authors
      summary: Create or update a list of authors
      operationId: crupdateAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        '200':
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /authors/page/{page}/pagesize/{pagesize}:
     get:
      summary: Get author by name
      description:  Retrieve a list of authors, optionally filtered by name.
      operationId: getByAuthorName
      tags:
        - Authors
      parameters:
        - name: page 
          in: path  
          schema:
            $ref: '#/components/parameters/QueryPagination/schema/properties/page'
          required: true
        - name: pagesize
          in: path
          schema:
            $ref: '#/components/parameters/QueryPagination/schema/properties/page_size'
          required: true
        - in: query
          name: name
          description: Name to filter authors
          required: false
          schema:
            type: string
      responses:
        '200':
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /authors/{aId}: 
    delete:
      summary: Delete an author
      operationId: deleteAuthor
      tags:
          - Authors
      parameters:
        - name: aId
          in: path
          description: Author identity to be delete
          schema:
            type: string
          required: true
      responses:
        200:
          description: Author deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
  /visitor{visitorId}/book/{bookId}/emprunts:
    put:
      tags:
          - Administrator
      summary: Crupdate a list of borrowed book
      operationId: create Boroowing
      parameters:
        - in: query
          name: visitorId
          description: crupdate the information of the visitor identified by {visitorId} with the data provided in the request body.
          required: false
          schema:
            type: string
        - in: query
          name: bookId
          description: crupdate the details of the book identified by {bookId} using the information provided in the request body.
          required: false
          schema:
            type: string
      requestBody :
        content:
          application/json:
            schema:  
               $ref: '#/components/schemas/EmpruntDetails'   
      responses:
        '200':
          description: The list of the borrowed books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EmpruntDetails'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /book/disponible:
    get:
      summary: Get  list of book disponible 
      description:  they return the list of books disponibles.
      operationId: getBookDispo
      tags:
        - Books
      parameters:
        - in: query
          name: page
          schema:
            $ref: '#/components/parameters/QueryPagination/schema/properties/page'
        - in: query
          name: pagesize
          schema:
            $ref: '#/components/parameters/QueryPagination/schema/properties/page_size'
    
      responses:
        '200':
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
              examples:
                livresEmpruntesExemple:
                  value:
                  - bookName: "Livre Emprunté 1"
                    topic: "ROMANCE"
                    pageNumbers: "200"
                    releaseDate: "2023-11-09"
                    statut: "disponible"
                    author:
                      name: "Auteur 7"
                      sex: "M"
                  - bookName: "Livre Emprunté 2"
                    topic: "FICTION"
                    pageNumbers: "150"
                    releaseDate: "2023-11-09"
                    statut: "disponible"
                    author:
                      name: "Auteur 8"
                      sex: "M"
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500' 
  /book/emprunts: 
    get:
      summary: Get A Book borrowed
      description:  Retrieve a list of borrowed book.
      operationId: getByBookName
      tags:
        - Books
      parameters:
        - name: page 
          in: path  
          schema:
            $ref: '#/components/parameters/QueryPagination/schema/properties/page'
          required: true
        - name: pagesize
          in: path
          schema:
            $ref: '#/components/parameters/QueryPagination/schema/properties/page_size'
          required: true
      responses:
        '200':
          description: The list of borrowed books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Emprunts'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'

  /book/{bookId}/emprunts/{empruntsId}/visitor/{visitorId}:
    get:
      summary: Get loan details for a specific visitor .
      description: know which books were borrowed and returned by this visitor. .
      operationId: getEmpruntDetailsForVisitor
      tags:
        - Administrator
      parameters:
        - in: path
          name: bookId
          required: true
          schema:
            type: string
          description: the book ID
        - in: path
          name: empruntsId
          required: true
          schema:
            type: string
          description: the emprunts ID
        - in: path
          name: visitorId
          required: true
          schema:
            type: string
          description: the visitor ID
        - in: query
          name: page
          schema:
            $ref: '#/components/parameters/QueryPagination/schema/properties/page'
        - in: query
          name: pagesize
          schema:
            $ref: '#/components/parameters/QueryPagination/schema/properties/page_size'
        
      responses:
        '200':
          description: get successfully the borrowed books list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EmpruntDetails'
              
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /visitors/{visitorId}/activities:
    get:
      summary: Get the activity of a visitors
      description: |
        Get the activity of a visitors
      operationId: getVisitorActivities
      tags:
        - Administrator
      parameters:
        - in: path
          name: visitorId
          required: true
          schema:
            type: string
          description: the visitor ID
        - in: query
          name: startDate
          schema:
            type: string
            format: date-time
          description: start of the date (format ISO 8601)
        - in: query
          name: endDate
          schema:
            type: string
            format: date-time
          description: end of the date(format ISO 8601)
        
      responses:
        '200':
          description: Les activités du visiteur pendant la période récupérées avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EmpruntDetails'
components:
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://example.com/oauth/authorize
          scopes:
            VISITEUR: Access as a visitor
            ADMINISTRATEUR: Access as administrator
  responses:
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestException'
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotAuthorizedException'
    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerException'
  schemas:
    Book:
      type: object
      properties:
        availability:
          type: boolean
        author:
          $ref: '#/components/schemas/Author'
      allOf:
        - $ref: '#/components/schemas/CrupdateBooks' 
      
    Author:
      type: object
      properties:
        name: 
          type: string
        sex:
         $ref: '#/components/schemas/Sex'
    Visitor: 
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        reference:
          type: string
    Emprunts:
      type: object
      properties:
        idVisitor:
          type: string
        idBook:
          type: string
        borrowing date:
          type: string
          format: date
    Return:
      type: object
      properties:
        idEmprunt:
          type: string
        return date:
          type: string
          format: date
    EmpruntDetails:
      type: object
      properties:
        rendu:
          type: boolean
      allOf:
        - $ref: '#/components/schemas/Emprunts'
        - properties:
            returnDate:
              type: string
              format: date
          required:
            - rendu
            - returnDate

    Sex:
        type: string
        enum:
            - M
            - F  
    Topic:
        type: string
        enum:
            - ROMANCE
            - COMEDY
            - OTHER
    CrupdateBooks: 
      type: object
      properties:
        bookName:
          type: string
        topic:
            $ref: '#/components/schemas/Topic'
        
        pageNumbers:
          $ref: '#/components/parameters/QueryPagination'
        releaseDate:
          type: string
          format: date
    UpdateBooks:
      type: object
      properties:
        bookId:
          type: string
          description: The ID of the book to update
        authorId: 
          type: string
          description: The new author ID for the book
    Exception:
      type: object
      properties:
        type:
          type: string
        message:
          type: string
    ResponseSuccefully:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: ResponseSuccefully
        message: Response  successfully
    BadRequestException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: BadRequestException
        message: Bad request
    NotAuthorizedException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: NotAuthorizedException
        message: Not authorized
    InternalServerException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: InternalServerException
        message: Unexpected error
    ImportAuthor:
         oneOf: 
          - $ref: '#/components/schemas/ImportAuthorExel'
          - $ref: '#/components/schemas/ImportAuthorJson'
    ImportBook:
        type: object
        properties:
          idAuthor:
            type: integer
        oneOf: 
          - $ref: '#/components/schemas/ImportBookExel'
          - $ref: '#/components/schemas/ImportBookJson'
    ImportBookExel:
        $ref: '#/components/schemas/Book'
    ImportBookJson:
        $ref: '#/components/schemas/Book'
    ImportAuthorExel:
        $ref: '#/components/schemas/Author'
    ImportAuthorJson:
        $ref: '#/components/schemas/Author'
    
    OutputData:
      type: object
      properties:
        message:
          type: string
    ImportChoice:
      oneOf:
        - $ref: '#/components/schemas/ImportAuthor'
        - $ref: '#/components/schemas/ImportBook'
      properties:
        outputData:
          $ref: '#/components/schemas/OutputData'
  parameters:
    QueryPagination:
      name: queryPagination
      in: query
      description: Paramètres de pagination.
      required: false
      schema:
        type: object
        properties:
          page:
            type: integer
            default: 1
            description: Le numéro de page.
          page_size:
            type: integer
            default: 50
            description: Le nombre d'éléments par page

    
    PathPagination:
      name: queryPagination
      in: path
      description: pagination parametters.
      required: true
      schema:
        type: object
        properties:
          page:
            type: integer
            default: 1
            description: page number.
          page_size:
            type: integer
            default: 50
            description: Page size

    